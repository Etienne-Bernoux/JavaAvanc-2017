package fr.ece.bernoux.Lab2Generics.ex1;

import java.util.ArrayList;
import java.util.ListIterator;
import java.util.Set;

public class ListGraph<V> implements Graph<V> {
	private final String label;
	private ArrayList<V> list;

	public ListGraph(String label) {
		super();
		this.label = label;
		this.setList(new ArrayList<>());
	}

	@Override
	public boolean addEdge(V fromVertex, V toVertex) {
		if (this.search(fromVertex)) {
			ListIterator<V> itr = ((ListGraph<V>) fromVertex).list.listIterator();
			while (itr.hasNext()) {
				V temp=itr.next();
				if (temp.equals(toVertex)) {
					return false;
				}
				((ListGraph<V>) fromVertex).list.add(toVertex);
			}
		}
		return false;
	}

	@Override
	public boolean addVertex(V vertex) {
		if (!this.search(vertex)) {
			System.out.println("add "+((ListGraph<V>)vertex).label+" to "+this.label);
			this.list.add(vertex);
		}
		return false;
	}

	@Override
	public Set<V> getChildren(V vertex) {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean search(V vertex) {
		ListIterator<V> itr = this.list.listIterator();
		while (itr.hasNext()) {
			V temp=itr.next();
			if (temp.equals(vertex)) {
				return true;
			} else {
				return ((ListGraph<V>) temp).search(vertex);
			}

		}
		return false;

	}

	public String getLabel() {
		return label;
	}

	public ArrayList<V> getList() {
		return list;
	}

	public void setList(ArrayList<V> list) {
		this.list = list;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((label == null) ? 0 : label.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ListGraph other = (ListGraph) obj;
		if (label == null) {
			if (other.label != null)
				return false;
		} else if (label.compareTo(other.label)!=0)
			return false;
		return true;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ListGraph<ListGraph> mygraph = new ListGraph<>("A");
		mygraph.addVertex(new ListGraph<>("B"));
		mygraph.addVertex(new ListGraph<>("C"));
		mygraph.addVertex(new ListGraph<>("C"));

	}
	

	
}
